{
    "docs": [
        {
            "location": "/",
            "text": "Node Example\n\n\nROS\n allows for creating nodes that communicate with each other. It is very common\nto use C++ and Python to write these nodes.\n\n\nThis package contains example nodes written in C++ and Python that show minimal examples of using\nsome very basic but powerful features of ROS. Those features include:\n\n\n\n\nparameter server\n\n\ndynamic reconfigure\n\n\ntimers\n\n\ncustom messages\n\n\nclasses with callback functions for\n    \npublishers and subscribers\n\n\nremap\n topic names\n\n\n\n\nThere are several launch files included, the main one being \nnode_example.launch\n. This will start\na talker and listener written in C++ and a talker and listener written in Python. One GUI will open\nallowing you to see what messages are being recieved by the listeners and another GUI will allow\nyou to change the values sent from each talker. Both listener nodes receive messages from both\ntalkers, showing that the languages used to write the talkers and listeners can be mixed.\n\n\nThe \nmaster\n branch will try to keep up with the latest long-term support release version of ROS (currently Kinetic).\nThe \nhydro-dev\n branch was tested on ROS Hydro, Indigo, and Kinetic.\nThe \nfuerte-dev\n branch was tested on ROS Fuerte.\n\n\nUsage\n\n\nRun\n\n\nroslaunch node_example node_example.launch\n\n\n\nto start all nodes. You should see two windows open: \nrqt_reconfigure\n and \nrqt_console\n. They will look like",
            "title": "Home"
        },
        {
            "location": "/#node-example",
            "text": "ROS  allows for creating nodes that communicate with each other. It is very common\nto use C++ and Python to write these nodes.  This package contains example nodes written in C++ and Python that show minimal examples of using\nsome very basic but powerful features of ROS. Those features include:   parameter server  dynamic reconfigure  timers  custom messages  classes with callback functions for\n     publishers and subscribers  remap  topic names   There are several launch files included, the main one being  node_example.launch . This will start\na talker and listener written in C++ and a talker and listener written in Python. One GUI will open\nallowing you to see what messages are being recieved by the listeners and another GUI will allow\nyou to change the values sent from each talker. Both listener nodes receive messages from both\ntalkers, showing that the languages used to write the talkers and listeners can be mixed.  The  master  branch will try to keep up with the latest long-term support release version of ROS (currently Kinetic).\nThe  hydro-dev  branch was tested on ROS Hydro, Indigo, and Kinetic.\nThe  fuerte-dev  branch was tested on ROS Fuerte.",
            "title": "Node Example"
        },
        {
            "location": "/#usage",
            "text": "Run  roslaunch node_example node_example.launch  to start all nodes. You should see two windows open:  rqt_reconfigure  and  rqt_console . They will look like",
            "title": "Usage"
        }
    ]
}